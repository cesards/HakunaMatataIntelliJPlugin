<idea-plugin version="2">
    <id>com.cesards.intellij.hakunamatata</id>
    <name>Hakuna Matata Postfix Completion</name>
    <version>1.0</version>
    <vendor email="cesaryomismo@gmail.com" url="http://codeforvictory.com">Cesards</vendor>


    <!--<description><![CDATA[-->
    <!--The basic idea is to prevent caret jumps backward while typing code,-->
    <!--let you start with the some expression, explore some APIs, think about-->
    <!--what you are going to do and after finish with statement of some type.<br/><br/>-->
    <!--<b>Available templates:</b><br/><br/>-->
    <!--<ul>-->
    <!--<li> <b>.if</b> – checks boolean expression to be true – <b>if (expr)</b></li>-->
    <!--<li> <b>.else</b> – checks boolean expression to be false – <b>if (!expr)</b></li>-->
    <!--<li> <b>.var</b> – initialize new variable with expression – <b>T x = expr;</b></li>-->
    <!--<li> <b>.null</b> – checks nullable expression to be null – <b>if (expr == null)</b></li>-->
    <!--<li> <b>.notnull</b> – checks expression to be non-null – <b>if (expr != null)</b></li>-->
    <!--<li> <b>.not</b> – negates value of inner boolean expression – <b>!expr</b></li>-->
    <!--<li> <b>.for</b> – iterates over collection – <b>for (T item : collection)</b></li>-->
    <!--<li> <b>.while</b> – uses expression as loop condition – <b>while (expr)</b></li>-->
    <!--<li> <b>.arg</b> – helps surround argument with invocation – <b>method(expr)</b></li>-->
    <!--<li> <b>.cast</b> – surrounds expression with cast – <b>(SomeType) expr</b></li>-->
    <!--<li> <b>.new</b> – produces instantiation expression for type – <b>new T()</b></li>-->
    <!--<li> <b>.fori</b> – surrounds with loop – <b>for (int i = 0; i < expr.length; i++)</b></li>-->
    <!--<li> <b>.forr</b> – reverse loop – <b>for (int i = expr.length - 1; i >= 0; i&#45;&#45;)</b></li>-->
    <!--<li> <b>.field</b> – introduces field for expression – <b>_field = expr;</b></li>-->
    <!--<li> <b>.par</b> – surrounds outer expression with parentheses – <b>(expr)</b></li>-->
    <!--<li> <b>.return</b> – returns value from containing method – <b>return expr;</b></li>-->
    <!--<li> <b>.switch</b> – switch over integral/enum/string values – <b>switch (expr)</b></li>-->
    <!--<li> <b>.throw</b> – throws exception of 'Throwable' type – <b>throw new Exception();</b></li>-->
    <!--<li> <b>.assert</b> – creates assertion from boolean expression – <b>assert expr;</b></li>-->
    <!--<li> <b>.synchronized</b> – produces synchronized block – <b>synchronized (expr)</b></li>-->
    <!--<li> <b>.instanceof</b> – surrounds expression with instanceof – <b>expr instanceof SomeType ? ((SomeType) expr). : null</b></li>-->
    <!--</ul>-->
    <!--<br/><b>Other features:</b><br/><br/>-->
    <!--<ul>-->
    <!--<li>Template expansion by <b>[Tab]</b> key in editor (like live templates)</li>-->
    <!--<li>Settings page to disable/enable particular postfix templates</li>-->
    <!--</ul>-->
    <!--]]></description>-->


    <description><![CDATA[

     This plugin adds postfix completion template for assertj.

       Postfix completion templates for guava
      <b>Available templates:</b><br/><


      Timbr completion
      Preconditions
      new



      <ul>
        <li> <b>.immutableSetOf</b><br/><em>Creates an immutable set containing a single element</em><br/><b>ImmutableSet.of(Object)</b></li>
      </ul>
      <ul>
        <li> <b>.fluentIterable</b><br/><em>Creates a fluent iterable that wraps iterable, or iterable itself if it is already a FluentIterable</em><br/><b>FluentIterable.from(Iterable)</b></li>
      </ul>
      <ul>
        <li> <b>.optional</b><br/><em>Creates an optional around the element, if variable is annotated as @Nullable then .fromNullable will be used, .of otherwise</em><br/><b>Optional.of(Object)</b></li>
      </ul>


    ]]></description>


    <!--<change-notes><![CDATA[-->
    <!--<b>Version 0.8-beta</b><br/>-->
    <!--API redesigned. Templates work like native live-templates now, that is more consistently.<br/>-->
    <!--New <b>instanceof</b> template.<br/>-->
    <!--Added abilities to configure expanding key and to disable particular templates directly from completion list (Alt+Enter).<br/><br/>-->
    <!---->
    <!--<b>Version 0.7.6-beta</b><br/>-->
    <!--Braces insertion in <b>.if</b>, <b>.else</b>, <b>.null</b> and <b>.notnull</b>.<br/><br/>-->
    <!--<b>Version 0.7.5-beta</b><br/>-->
    <!--Settings page to disable/enable particular templates. Better <b>.cast</b> template.<br/><br/>-->
    <!--<b>Version 0.7-beta</b><br/>-->
    <!--New templates: <b>.switch</b>, <b>.throw</b>, <b>.assert</b> and <b>.synchronized</b>.<br/><br/>-->
    <!--<b>Version 0.6-beta</b><br/>-->
    <!--Fixes, new templates: <b>.field</b>, <b>.par</b> and <b>.return</b>.<br/><br/>-->
    <!--<b>Version 0.5-beta</b><br/>-->
    <!--Various fixes for completion with over literals.<br/>-->
    <!--New <b>.fori</b> and <b>.forr</b> templates iteration with index.<br/><br/>-->
    <!--]]></change-notes>-->

    <change-notes><![CDATA[
       * Initial release
    ]]>
    </change-notes>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
    <idea-version since-build="141.0"/>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->

    <!--<depends>com.intellij.modules.lang</depends>-->
    <!--<depends>com.intellij.modules.java</depends>-->

    <extensions defaultExtensionNs="com.intellij">
        <codeInsight.template.postfixTemplateProvider language="JAVA"
                                                      implementationClass="postfix.HakunaMatataPostfixTemplateProvider"/>
        <defaultLiveTemplatesProvider implementation="livetemplate.HakunaMatataLiveTemplateProvider"/>
    </extensions>

    <actions/>
</idea-plugin>